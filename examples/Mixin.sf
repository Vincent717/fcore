type Mixin[S] = (Unit -> S) -> (Unit -> S) -> S;
let zero[S] (super: Unit -> S) (this: Unit -> S): S = super;
let rec mixin[S] (f: Mixin[S]): S = let m = mixin[S]; f (\(d: Unit) -> m f) (\(d: Unit) -> m f);
let extends[S] (f: Mixin[S]) (g: Mixin[S]) : Mixin[S]
  = \(super: Unit -> S) (this: Unit -> S) -> f (\(d: Unit) -> g super this) this;
let fact (super: Unit -> Int -> Int) (this: Unit -> Int -> Int): Int -> Int
  = \(n: Int) -> if n == 0 then 1 else n * this () (n - 1)
and
  foolish (super: Unit -> Int -> Int) (this: Unit -> Int -> Int): Int -> Int
  = \(n: Int) -> { println("Hola"); super () n }
;
mixin[Int -> Int] (extends[Int -> Int] foolish fact) 5
