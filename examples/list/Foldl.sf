let rec
  foldl [A, B] (f:B->A->B) (x:B) (xs:List[A]) : B =
    if(isNil(xs))
    then x
    else foldl [A, B] f (f x head(xs)) (tail(xs));

let f(x:Int) (y:Int): Int = x+ y;

foldl [Int, Int] f 0 (new List[Int](-1,0,1,2,3))
